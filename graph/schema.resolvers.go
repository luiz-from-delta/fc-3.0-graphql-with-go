package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/luiz-from-delta/fc-graphql-with-go/graph/model"
)

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, createCourseInput model.CreateCourseInput) (*model.Course, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(1000))
	id := fmt.Sprintf("course-%d", randNumber)

	var courseCategories []*model.CourseCategory
	for _, categoryID := range createCourseInput.Categories {
		courseCategories = append(courseCategories, &model.CourseCategory{
			CourseID:   id,
			CategoryID: categoryID,
		})
	}

	course := &model.Course{
		ID:               id,
		Name:             createCourseInput.Name,
		Description:      createCourseInput.Description,
		CourseCategories: courseCategories,
	}

	r.courses = append(r.courses, course)
	return course, nil
}

// UpdateCourse is the resolver for the updateCourse field.
func (r *mutationResolver) UpdateCourse(ctx context.Context, courseID string, updateCourseInput model.UpdateCourseInput) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: UpdateCourse - updateCourse"))
}

// DeleteCourse is the resolver for the deleteCourse field.
func (r *mutationResolver) DeleteCourse(ctx context.Context, courseID string) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: DeleteCourse - deleteCourse"))
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, createCategoryInput model.CreateCategoryInput) (*model.Category, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(1000))
	id := fmt.Sprintf("category-%d", randNumber)

	var courseCategories []*model.CourseCategory
	for _, courseID := range createCategoryInput.Courses {
		courseCategories = append(courseCategories, &model.CourseCategory{
			CourseID:   courseID,
			CategoryID: id,
		})
	}

	category := &model.Category{
		ID:               id,
		Name:             createCategoryInput.Name,
		Description:      createCategoryInput.Description,
		CourseCategories: courseCategories,
	}

	r.categories = append(r.categories, category)
	return category, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, categoryID string, updateCategoryInput model.UpdateCategoryInput) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: UpdateCategory - updateCategory"))
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, categoryID string) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: DeleteCategory - deleteCategory"))
}

// CreateStudent is the resolver for the createStudent field.
func (r *mutationResolver) CreateStudent(ctx context.Context, createStudentInput model.CreateStudentInput) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: CreateStudent - createStudent"))
}

// UpdateStudent is the resolver for the updateStudent field.
func (r *mutationResolver) UpdateStudent(ctx context.Context, studentID string, updateStudentInput model.UpdateStudentInput) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: UpdateStudent - updateStudent"))
}

// DeleteStudent is the resolver for the deleteStudent field.
func (r *mutationResolver) DeleteStudent(ctx context.Context, studentID string) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: DeleteStudent - deleteStudent"))
}

// CreateSubscription is the resolver for the createSubscription field.
func (r *mutationResolver) CreateSubscription(ctx context.Context, createSubscriptionInput model.CreateSubscriptionInput) (*model.Subscription, error) {
	panic(fmt.Errorf("not implemented: CreateSubscription - createSubscription"))
}

// UpdateSubscription is the resolver for the updateSubscription field.
func (r *mutationResolver) UpdateSubscription(ctx context.Context, subscriptionID string, updateSubscriptionInput model.UpdateSubscriptionInput) (*model.Subscription, error) {
	panic(fmt.Errorf("not implemented: UpdateSubscription - updateSubscription"))
}

// DeleteSubscription is the resolver for the deleteSubscription field.
func (r *mutationResolver) DeleteSubscription(ctx context.Context, subscriptionID string) (*model.Subscription, error) {
	panic(fmt.Errorf("not implemented: DeleteSubscription - deleteSubscription"))
}

// ListCourses is the resolver for the listCourses field.
func (r *queryResolver) ListCourses(ctx context.Context) ([]*model.Course, error) {
	return r.courses, nil
}

// RetrieveCourseByID is the resolver for the retrieveCourseById field.
func (r *queryResolver) RetrieveCourseByID(ctx context.Context, courseID string) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: RetrieveCourseByID - retrieveCourseById"))
}

// ListCategories is the resolver for the listCategories field.
func (r *queryResolver) ListCategories(ctx context.Context) ([]*model.Category, error) {
	return r.categories, nil
}

// RetrieveCategoryByID is the resolver for the retrieveCategoryById field.
func (r *queryResolver) RetrieveCategoryByID(ctx context.Context, categoryID string) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: RetrieveCategoryByID - retrieveCategoryById"))
}

// ListStudents is the resolver for the listStudents field.
func (r *queryResolver) ListStudents(ctx context.Context) ([]*model.Student, error) {
	panic(fmt.Errorf("not implemented: ListStudents - listStudents"))
}

// RetrieveStudentByID is the resolver for the retrieveStudentById field.
func (r *queryResolver) RetrieveStudentByID(ctx context.Context, studentID string) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: RetrieveStudentByID - retrieveStudentById"))
}

// ListSubscriptions is the resolver for the listSubscriptions field.
func (r *queryResolver) ListSubscriptions(ctx context.Context) ([]*model.Subscription, error) {
	panic(fmt.Errorf("not implemented: ListSubscriptions - listSubscriptions"))
}

// RetrieveSubscriptionByID is the resolver for the retrieveSubscriptionById field.
func (r *queryResolver) RetrieveSubscriptionByID(ctx context.Context, subscriptionID string) (*model.Subscription, error) {
	panic(fmt.Errorf("not implemented: RetrieveSubscriptionByID - retrieveSubscriptionById"))
}

// StudentID is the resolver for the studentId field.
func (r *subscriptionResolver) StudentID(ctx context.Context) (<-chan string, error) {
	panic(fmt.Errorf("not implemented: StudentID - studentId"))
}

// Student is the resolver for the student field.
func (r *subscriptionResolver) Student(ctx context.Context) (<-chan *model.Student, error) {
	panic(fmt.Errorf("not implemented: Student - student"))
}

// CourseID is the resolver for the courseId field.
func (r *subscriptionResolver) CourseID(ctx context.Context) (<-chan string, error) {
	panic(fmt.Errorf("not implemented: CourseID - courseId"))
}

// Course is the resolver for the course field.
func (r *subscriptionResolver) Course(ctx context.Context) (<-chan *model.Course, error) {
	panic(fmt.Errorf("not implemented: Course - course"))
}

// Status is the resolver for the status field.
func (r *subscriptionResolver) Status(ctx context.Context) (<-chan model.SubscriptionStatus, error) {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *subscriptionResolver) CreatedAt(ctx context.Context) (<-chan string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *subscriptionResolver) UpdatedAt(ctx context.Context) (<-chan string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
